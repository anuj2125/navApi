// <auto-generated />
using System;
using Localdb;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace dbLocal.Migrations
{
    [DbContext(typeof(PistisContext))]
    partial class PistisContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Models.Action", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Actions");
                });

            modelBuilder.Entity("Models.BannerImages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Image");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("BannerImages");
                });

            modelBuilder.Entity("Models.Cart", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal?>("AdditionalCost");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsConvertToCheckout");

                    b.Property<DateTime>("OrderDate");

                    b.Property<string>("OrderNumber");

                    b.Property<decimal>("TotalAmount");

                    b.Property<int?>("UserId");

                    b.Property<int?>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Models.CartItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Amount");

                    b.Property<int>("CartId");

                    b.Property<int>("Discount");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ProductVariantDetailId");

                    b.Property<int>("Quantity");

                    b.Property<int>("UnitId");

                    b.Property<decimal>("UnitPrice");

                    b.Property<int?>("UserId");

                    b.Property<int>("VendorId");

                    b.HasKey("Id");

                    b.HasIndex("CartId");

                    b.HasIndex("ProductVariantDetailId");

                    b.HasIndex("UnitId");

                    b.HasIndex("UserId");

                    b.ToTable("CartItems");
                });

            modelBuilder.Entity("Models.CategoryVariant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ControlTypeId");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsMain");

                    b.Property<bool>("IsSearchOption");

                    b.Property<int>("ProductCategoryId");

                    b.Property<int>("VariantId");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("VariantId");

                    b.ToTable("CategoryVariants");
                });

            modelBuilder.Entity("Models.Company", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Logo");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Companies");
                });

            modelBuilder.Entity("Models.ControlType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CategoryVariantId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.HasIndex("CategoryVariantId");

                    b.ToTable("ControlType");
                });

            modelBuilder.Entity("Models.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("Models.CustomerGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("GroupName");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.ToTable("customerGroups");
                });

            modelBuilder.Entity("Models.CustomerGroupUsers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerGroupId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerGroupId");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerGroupUsers");
                });

            modelBuilder.Entity("Models.CustomerHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CustomerId");

                    b.Property<DateTime>("Date");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ProductId");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("CustomerHistories");
                });

            modelBuilder.Entity("Models.FeatureProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("FeatureProducts");
                });

            modelBuilder.Entity("Models.FooterHeader", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("FooterHeaders");
                });

            modelBuilder.Entity("Models.FooterUrl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("FooterHeaderId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.HasIndex("FooterHeaderId");

                    b.ToTable("FooterUrls");
                });

            modelBuilder.Entity("Models.FooterUrlData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Data");

                    b.Property<int>("FooterUrlId");

                    b.Property<bool>("IsActive");

                    b.HasKey("Id");

                    b.HasIndex("FooterUrlId");

                    b.ToTable("FooterUrlDatas");
                });

            modelBuilder.Entity("Models.Gender", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Genders");
                });

            modelBuilder.Entity("Models.Language", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("Models.Newsletter", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsSubscribed");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Newsletters");
                });

            modelBuilder.Entity("Models.Page", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Pages");
                });

            modelBuilder.Entity("Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Barcode");

                    b.Property<decimal>("CostPrice");

                    b.Property<string>("Description");

                    b.Property<int>("Discount");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<decimal>("PriceAfterdiscount");

                    b.Property<int>("ProductCategoryId");

                    b.Property<string>("ProductTags");

                    b.Property<decimal>("SellingPrice");

                    b.Property<int>("UnitId");

                    b.HasKey("Id");

                    b.HasIndex("ProductCategoryId");

                    b.HasIndex("UnitId");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Models.ProductCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Icon");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("ProductCategories");
                });

            modelBuilder.Entity("Models.ProductImage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ImagePath");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDefault");

                    b.Property<string>("Name");

                    b.Property<int>("ProductId");

                    b.Property<int>("ProductVariantDetailId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("ProductVariantDetailId");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Models.ProductVariantDetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("InStock");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsDefault");

                    b.Property<decimal>("Price");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductVariantDetails");
                });

            modelBuilder.Entity("Models.ProductVariantOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CategoryVariantId");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ProductVariantDetailId");

                    b.Property<int>("VariantOptionId");

                    b.HasKey("Id");

                    b.HasIndex("CategoryVariantId");

                    b.HasIndex("ProductVariantDetailId");

                    b.HasIndex("VariantOptionId");

                    b.ToTable("ProductVariantOptions");
                });

            modelBuilder.Entity("Models.ProductionSpecification", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description");

                    b.Property<string>("HeadingName");

                    b.Property<bool>("IsActive");

                    b.Property<int>("ProductId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.ToTable("ProductionSpecifications");
                });

            modelBuilder.Entity("Models.RatingReview", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<int>("ProductId");

                    b.Property<int>("Rating");

                    b.Property<string>("Review");

                    b.Property<DateTime>("ReviewDate");

                    b.Property<int>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("RatingReviews");
                });

            modelBuilder.Entity("Models.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool?>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Models.Slider", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("FromDateTime");

                    b.Property<string>("Image");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ToDateTime");

                    b.Property<string>("Url");

                    b.HasKey("Id");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("Models.State", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("CountryId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("States");
                });

            modelBuilder.Entity("Models.StockTransaction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<int>("ProductVariantOptionId");

                    b.Property<int>("Quantity");

                    b.Property<DateTime>("TransactionDate");

                    b.Property<int>("TransactionTypeId");

                    b.HasKey("Id");

                    b.HasIndex("ProductVariantOptionId");

                    b.HasIndex("TransactionTypeId");

                    b.ToTable("StockTransactions");
                });

            modelBuilder.Entity("Models.TransactionType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("TransactionTypes");
                });

            modelBuilder.Entity("Models.Unit", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address");

                    b.Property<string>("City");

                    b.Property<int?>("CompanyId");

                    b.Property<int?>("CountryId");

                    b.Property<DateTime?>("DOB");

                    b.Property<string>("DisplayName");

                    b.Property<string>("Email");

                    b.Property<string>("FacebookId");

                    b.Property<string>("FirstName");

                    b.Property<int?>("GenderId");

                    b.Property<string>("Image");

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsVerified");

                    b.Property<int?>("LanguageId");

                    b.Property<string>("LastName");

                    b.Property<string>("MiddleName");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("Phone");

                    b.Property<string>("PostalCode");

                    b.Property<int>("RoleId");

                    b.Property<int?>("StateId");

                    b.Property<string>("TwitterId");

                    b.Property<string>("UserName");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CountryId");

                    b.HasIndex("GenderId");

                    b.HasIndex("LanguageId");

                    b.HasIndex("RoleId");

                    b.HasIndex("StateId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Models.UserLog", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ActionId");

                    b.Property<string>("IPAddress");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime?>("LogInDate");

                    b.Property<DateTime>("LogOutDate");

                    b.Property<int?>("PageId");

                    b.Property<int?>("ProductId");

                    b.Property<string>("Url");

                    b.Property<int?>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("ActionId");

                    b.HasIndex("PageId");

                    b.HasIndex("ProductId");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogs");
                });

            modelBuilder.Entity("Models.Variant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<bool>("IsMain");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.ToTable("Variants");
                });

            modelBuilder.Entity("Models.VariantOption", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int>("VariantId");

                    b.HasKey("Id");

                    b.HasIndex("VariantId");

                    b.ToTable("VariantOptions");
                });

            modelBuilder.Entity("Models.Cart", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany("Carts")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Models.CartItem", b =>
                {
                    b.HasOne("Models.Cart", "Cart")
                        .WithMany("CartItems")
                        .HasForeignKey("CartId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.ProductVariantDetail", "ProductVariantDetail")
                        .WithMany("CartItems")
                        .HasForeignKey("ProductVariantDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Unit", "Unit")
                        .WithMany("CartItems")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.User", "User")
                        .WithMany("CartItems")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Models.CategoryVariant", b =>
                {
                    b.HasOne("Models.ProductCategory", "ProductCategory")
                        .WithMany("CategoryVariants")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Variant", "Variant")
                        .WithMany("CategoryVariants")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.ControlType", b =>
                {
                    b.HasOne("Models.CategoryVariant")
                        .WithMany("ControlTypes")
                        .HasForeignKey("CategoryVariantId");
                });

            modelBuilder.Entity("Models.CustomerGroupUsers", b =>
                {
                    b.HasOne("Models.CustomerGroup", "CustomerGroup")
                        .WithMany("CustomerGroupUsers")
                        .HasForeignKey("CustomerGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.CustomerHistory", b =>
                {
                    b.HasOne("Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Models.FeatureProduct", b =>
                {
                    b.HasOne("Models.Product", "Product")
                        .WithMany("FeatureProducts")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.FooterUrl", b =>
                {
                    b.HasOne("Models.FooterHeader", "FooterHeader")
                        .WithMany("FooterUrls")
                        .HasForeignKey("FooterHeaderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.FooterUrlData", b =>
                {
                    b.HasOne("Models.FooterUrl", "FooterUrl")
                        .WithMany()
                        .HasForeignKey("FooterUrlId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.Newsletter", b =>
                {
                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Models.Product", b =>
                {
                    b.HasOne("Models.ProductCategory", "ProductCategory")
                        .WithMany("Products")
                        .HasForeignKey("ProductCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.Unit", "Unit")
                        .WithMany("Products")
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.ProductCategory", b =>
                {
                    b.HasOne("Models.ProductCategory", "Parent")
                        .WithMany("ProductCategory1")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("Models.ProductImage", b =>
                {
                    b.HasOne("Models.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.ProductVariantDetail", "ProductVariantDetail")
                        .WithMany()
                        .HasForeignKey("ProductVariantDetailId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.ProductVariantDetail", b =>
                {
                    b.HasOne("Models.Product", "Product")
                        .WithMany("ProductVariantDetails")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.ProductVariantOption", b =>
                {
                    b.HasOne("Models.CategoryVariant", "CategoryVariant")
                        .WithMany("ProductVariantOptions")
                        .HasForeignKey("CategoryVariantId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.ProductVariantDetail", "ProductVariantDetail")
                        .WithMany("ProductVariantOptions")
                        .HasForeignKey("ProductVariantDetailId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.VariantOption", "VariantOption")
                        .WithMany("ProductVariantOptions")
                        .HasForeignKey("VariantOptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.ProductionSpecification", b =>
                {
                    b.HasOne("Models.Product", "Product")
                        .WithMany("ProductionSpecifications")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.RatingReview", b =>
                {
                    b.HasOne("Models.Product", "Product")
                        .WithMany("RatingReviews")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.State", b =>
                {
                    b.HasOne("Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.StockTransaction", b =>
                {
                    b.HasOne("Models.ProductVariantOption", "ProductVariantOption")
                        .WithMany("StockTransactions")
                        .HasForeignKey("ProductVariantOptionId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.TransactionType", "TransactionType")
                        .WithMany("StockTransactions")
                        .HasForeignKey("TransactionTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Models.User", b =>
                {
                    b.HasOne("Models.Company", "Company")
                        .WithMany("Users")
                        .HasForeignKey("CompanyId");

                    b.HasOne("Models.Country", "Country")
                        .WithMany("Users")
                        .HasForeignKey("CountryId");

                    b.HasOne("Models.Gender", "Gender")
                        .WithMany("Users")
                        .HasForeignKey("GenderId");

                    b.HasOne("Models.Language", "Language")
                        .WithMany("Users")
                        .HasForeignKey("LanguageId");

                    b.HasOne("Models.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Models.State", "State")
                        .WithMany("Users")
                        .HasForeignKey("StateId");
                });

            modelBuilder.Entity("Models.UserLog", b =>
                {
                    b.HasOne("Models.Action", "Action")
                        .WithMany("userLogs")
                        .HasForeignKey("ActionId");

                    b.HasOne("Models.Page", "Page")
                        .WithMany("userLogs")
                        .HasForeignKey("PageId");

                    b.HasOne("Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId");

                    b.HasOne("Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Models.VariantOption", b =>
                {
                    b.HasOne("Models.Variant", "Variant")
                        .WithMany("VariantOptions")
                        .HasForeignKey("VariantId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
